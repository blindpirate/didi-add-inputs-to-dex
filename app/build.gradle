import com.android.build.api.transform.QualifiedContent
import com.android.build.gradle.internal.api.ApplicationVariantImpl
import com.android.build.gradle.internal.pipeline.OriginalStream
import com.android.build.gradle.internal.pipeline.TransformTask
import com.didi.GenerateTask

/*
 * Copyright 2017, The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'

android {
    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId 'com.example.android.persistence'
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables {
            useSupportLibrary = true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                 "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    productFlavors {
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    implementation deps.app_compat
    implementation deps.fragment.runtime
    implementation deps.material
    implementation deps.cardview

    // Architecture components
    implementation deps.lifecycle.runtime
    annotationProcessor deps.lifecycle.compiler
    implementation deps.room.runtime
    annotationProcessor deps.room.compiler

    // Android Testing Support Library's runner and rules
    androidTestImplementation deps.atsl.core
    androidTestImplementation deps.atsl.ext_junit
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.rules
    androidTestImplementation deps.room.testing
    androidTestImplementation deps.arch_core.testing

    // Espresso UI Testing
    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.espresso.contrib
    androidTestImplementation deps.espresso.intents

    // Resolve conflicts between main and test APK:
    androidTestImplementation deps.annotations
    androidTestImplementation deps.app_compat
    androidTestImplementation deps.material
}

afterEvaluate { project ->
    android.applicationVariants.each { variant ->
        File generateSourceDir = new File(variant.javaCompile.getDestinationDir().parentFile, "spi-source")
        File generatedClassDir = new File(variant.javaCompile.getDestinationDir().parentFile, "spi-classes")
        Task generateTask = project.tasks.create("generateServiceRegistryFor${variant.name.capitalize()}", GenerateTask.class) { GenerateTask task ->
            task.inputFiles = project.fileTree(variant.javaCompile.destinationDir)
            task.outputFile = new File(generateSourceDir, "com/didi/ServiceRegistry.java")
        }

        Task compileTask = project.tasks.create("compileServiceRegistryFor${variant.name.capitalize()}", JavaCompile.class) { JavaCompile compileTask ->
            JavaCompile javac = (JavaCompile) project.tasks.getByName("compile${variant.name.capitalize()}JavaWithJavac")
            compileTask.classpath = javac.classpath + project.files(variant.javaCompile.destinationDir)
            compileTask.source(project.files(generateSourceDir))
            compileTask.destinationDir(generatedClassDir)
            dependsOn(generateTask)
        }

        TransformTask transformTask = project.tasks.findByName("transformClassesWithDexBuilderFor" + variant.name.capitalize())
        Collection consumedInputStreams = transformTask.consumedInputStreams
//        ApplicationVariantImpl impl = (ApplicationVariantImpl)variant;
//        impl.getVariantData().scope.transformManager.addStream( //OriginalStream.builder(project, "spi-classes")
        consumedInputStreams.add(
            OriginalStream.builder(project, "spi-javac-output")
                .addContentTypes(QualifiedContent.DefaultContentType.CLASSES, QualifiedContent.DefaultContentType.RESOURCES)
                .addScope(QualifiedContent.Scope.PROJECT)
                .setFileCollection(project.files(generatedClassDir))
                .build()
        )

        project.tasks.getByName("assemble" + variant.name.capitalize()).dependsOn(compileTask)
    }
}

